// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module TopLevel(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

logic	[1:0]		stage;
logic	[15:0]	valToShow;
logic [3:0]		debouncedSwitches;
logic				key0Pressed;
logic				key1Pressed;
logic [1:0]		buttons;
logic				memDone;
logic [15:0]	memDataIn;
logic [1:0] 	memCmd;    

logic [24:0] 	memAddrOut; 
logic 			ioDone;     
logic [31:0] 	dispData;
logic [1:0]		modeSelect;
//inout net
wire	[15:0]	dq;	//goes into the controller
logic	[15:0]	dqInput;
logic	[15:0] 	dqOutput;

logic pulse0;
logic pulse1;

logic [11:0] state;
logic			 reset;


//=======================================================
//  Structural coding
//=======================================================
meta #(
  .DATA_WIDTH (1),
  .DEPTH (6)
) meta_key0 (
  .clk (MAX10_CLK1_50),
  .in_sig (!KEY[0]),
  .out_sig (key0Pressed)
);

meta #(
  .DATA_WIDTH (1),
  .DEPTH (6)
) meta_key1 (
  .clk (MAX10_CLK1_50),
  .in_sig (!KEY[1]),
  .out_sig (key1Pressed)
);

pulseDetector pulse0Detect(
	.clk	(MAX10_CLK1_50),
	.key	(!KEY[0]),
	.pulse	(pulse0)
);

pulseDetector pulse1Detect(
	.clk	(MAX10_CLK1_50),
	.key	(!KEY[1]),
	.pulse	(pulse1)
);


meta #(
  .DATA_WIDTH (9),
  .DEPTH (6)
) meta_switches (
  .clk (MAX10_CLK1_50),
  .in_sig (SW[8:0]),
  .out_sig (debouncedSwitches)
);


hexDisplay disp(
	
	.state			(state),
	.inVal			(valToShow),
	.HEX0				(HEX0),
	.HEX1				(HEX1),
	.HEX2				(HEX2),
	.HEX3				(HEX3),
	.HEX4				(HEX4),
	.HEX5				(HEX5)
);

assign LEDR[8:0] = SW[8:0];


inOutControl inputController(
    .clk					(MAX10_CLK1_50),
    .key0_pulse		(pulse0),
    .key1_pulse		(pulse1),
	 .key0_debounce	(key0Pressed),
	 .key1_debounce	(key1Pressed),
    .sw					(debouncedSwitches),
    .memDone			(memDone),
	 .read_data			(dqInput),

    .modeOutput		(modeSelect), 	//hex
    .memoryAddress	(memAddrOut), 					// memory
    .write_data		(dqOutput), 	// memory
    .displayData		(valToShow), 	//hex
    .ioDone     		(ioDone),
	 .out_state			(state),
	 .reset_out			(reset)
);

assign dq = modeSelect == 2'b10 ? dqOutput : 16'bz;
assign dqInput = dq;
assign LEDR[9] = ioDone;

memory_controller memController(
    .clk			(MAX10_CLK1_50),
    .cmd			(modeSelect),
    .addr		(memAddrOut),
    .dq			(dq),
    .ready		(ioDone),
    .rst			(reset),
    .valid		(memDone),

    .DRAM_ADDR	(DRAM_ADDR),
    .DRAM_BA	(DRAM_BA),
    .DRAM_DQ	(DRAM_DQ),

    .DRAM_LDQM	(DRAM_LDQM),
    .DRAM_UDQM	(DRAM_UDQM),
    .DRAM_RAS_N(DRAM_RAS_N),
    .DRAM_CAS_N(DRAM_CAS_N),
    .DRAM_CKE	(DRAM_CKE),
    .DRAM_CLK	(DRAM_CLK),
    .DRAM_WE_N	(DRAM_WE_N),
    .DRAM_CS_N	(DRAM_CS_N)
	 );



endmodule
